// routes/phong.js
const express = require("express");
const router = express.Router();
const Phong = require("../models/Phong");
const User = require("../models/User"); // ‚úÖ th√™m
const multer = require("multer"); // Import multer
const path = require("path"); // ƒê·ªÉ x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n file
const fs = require("fs"); // ƒê·ªÉ x√≥a file

// --- C·∫•u h√¨nh Multer ƒë·ªÉ l∆∞u tr·ªØ ·∫£nh ---
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadPath = path.join(__dirname, "../uploads/phong");
    // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    cb(null, uploadPath); // Th∆∞ m·ª•c l∆∞u tr·ªØ ·∫£nh
  },
  filename: function (req, file, cb) {
    // ƒê·ªïi t√™n file ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    cb(
      null,
      file.fieldname + "-" + Date.now() + path.extname(file.originalname)
    );
  },
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 }, // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file 10MB
  fileFilter: function (req, file, cb) {
    checkFileType(file, cb);
  },
});

// H√†m ki·ªÉm tra lo·∫°i file
function checkFileType(file, cb) {
  // Cho ph√©p c√°c ƒëu√¥i file ·∫£nh
  const filetypes = /jpeg|jpg|png|gif/;
  // Ki·ªÉm tra ƒëu√¥i file
  const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
  // Ki·ªÉm tra mime type
  const mimetype = filetypes.test(file.mimetype);

  if (mimetype && extname) {
    return cb(null, true);
  } else {
    cb("L·ªói: Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh!");
  }
}
// --- K·∫øt th√∫c c·∫•u h√¨nh Multer ---

// üè† Th√™m ph√≤ng (S·ª≠ d·ª•ng middleware upload.array ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu ·∫£nh)
router.post("/", upload.array("images", 10), async (req, res) => {
  try {
    if (!req.body.chuTroId) {
      // N·∫øu c√≥ file upload nh∆∞ng thi·∫øu chuTroId, x√≥a c√°c file ƒë√£ upload
      if (req.files) {
        req.files.forEach((file) => fs.unlinkSync(file.path));
      }
      return res.status(400).json({ error: "Thi·∫øu chuTroId" });
    }

    // ================================================================
    // ‚úÖ B·∫ÆT ƒê·∫¶U ƒêO·∫†N CODE M·ªöI ƒê·ªÇ KI·ªÇM TRA T√äN PH√íNG
    // ================================================================
    const { tenPhong, chuTroId } = req.body;

    // T√¨m m·ªôt ph√≤ng c√≥ c√πng t√™n V√Ä c√πng ch·ªß tr·ªç
    const existingPhong = await Phong.findOne({
      tenPhong: tenPhong,
      chuTroId: chuTroId,
    });

    // N·∫øu t√¨m th·∫•y ph√≤ng c√≥ t√™n tr√πng
    if (existingPhong) {
      // X√≥a c√°c file ·∫£nh v·ª´a ƒë∆∞·ª£c t·∫£i l√™n ƒë·ªÉ tr√°nh r√°c server
      if (req.files) {
        req.files.forEach((file) => fs.unlinkSync(file.path));
      }
      // Tr·∫£ v·ªÅ l·ªói 409 (Conflict) v·ªõi th√¥ng b√°o r√µ r√†ng
      return res
        .status(409)
        .json({ error: "T√™n ph√≤ng ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c." });
    }
    // ================================================================
    // ‚úÖ K·∫æT TH√öC ƒêO·∫†N CODE M·ªöI
    // ================================================================

    // N·∫øu kh√¥ng c√≥ l·ªói, code s·∫Ω ti·∫øp t·ª•c ch·∫°y nh∆∞ c≈©
    const { coverImageIndex, ...otherBody } = req.body;
    const imageUrls = req.files
      ? req.files.map((file) => `/uploads/phong/${file.filename}`)
      : [];

    let coverImageUrl = imageUrls[0] || ""; // M·∫∑c ƒë·ªãnh ·∫£nh ƒë·∫ßu ti√™n l√† b√¨a
    if (
      imageUrls.length > 0 &&
      typeof coverImageIndex !== "undefined" &&
      imageUrls[coverImageIndex]
    ) {
      coverImageUrl = imageUrls[parseInt(coverImageIndex, 10)];
    }

    const newPhong = new Phong({
      ...otherBody,
      chuTroId: req.body.chuTroId,
      images: imageUrls,
      coverImage: coverImageUrl,
    });
    const savedPhong = await newPhong.save();

    // C·∫≠p nh·∫≠t s·ªë ph√≤ng c·ªßa ch·ªß tr·ªç +1
    await User.findByIdAndUpdate(savedPhong.chuTroId, {
      $inc: { soPhong: 1 },
    });

    res.status(201).json(savedPhong);
  } catch (err) {
    console.error("‚ùå L·ªói khi l∆∞u ph√≤ng:", err);
    // N·∫øu c√≥ l·ªói, x√≥a c√°c file ƒë√£ upload ƒë·ªÉ tr√°nh r√°c
    if (req.files) {
      req.files.forEach((file) => fs.unlinkSync(file.path));
    }
    res.status(500).json({ error: err.message });
  }
});

// GET /api/phong/chu-tro/:chuTroId
router.get("/chu-tro/:chuTroId", async (req, res) => {
  try {
    const rooms = await Phong.find({ chuTroId: req.params.chuTroId });
    res.json(rooms);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üìå L·∫•y chi ti·∫øt 1 ph√≤ng theo id
router.get("/:id", async (req, res) => {
  try {
    const phong = await Phong.findById(req.params.id).select("-chuTroId -__v");
    if (!phong)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng" });
    res.json(phong);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// üìå C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng (ƒê√£ n√¢ng c·∫•p ƒë·ªÉ x·ª≠ l√Ω ·∫£nh)
router.put("/:id", upload.array("newImages", 10), async (req, res) => {
  try {
    const phongToUpdate = await Phong.findById(req.params.id);
    if (!phongToUpdate) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng" });
    }

    // 1. X·ª≠ l√Ω c√°c file ·∫£nh m·ªõi ƒë∆∞·ª£c t·∫£i l√™n
    const newImageUrls = req.files
      ? req.files.map((file) => `/uploads/phong/${file.filename}`)
      : [];

    // 2. L·∫•y danh s√°ch ·∫£nh c≈© ƒë∆∞·ª£c gi·ªØ l·∫°i t·ª´ form
    let existingImages = [];
    if (req.body.existingImages) {
      existingImages = JSON.parse(req.body.existingImages);
    }

    // 3. K·∫øt h·ª£p ·∫£nh c≈© v√† ·∫£nh m·ªõi ƒë·ªÉ t·∫°o danh s√°ch ·∫£nh cu·ªëi c√πng
    const finalImages = [...existingImages, ...newImageUrls];

    // 4. X√°c ƒë·ªãnh ·∫£nh b√¨a m·ªõi
    let finalCoverImage = "";
    if (req.body.coverImage) {
      // N·∫øu ·∫£nh b√¨a l√† ·∫£nh c≈©
      finalCoverImage = req.body.coverImage;
    } else if (req.body.newCoverImageIndex) {
      // N·∫øu ·∫£nh b√¨a l√† ·∫£nh m·ªõi
      const index = parseInt(req.body.newCoverImageIndex, 10);
      finalCoverImage = newImageUrls[index];
    } else if (finalImages.length > 0) {
      // Fallback: l·∫•y ·∫£nh ƒë·∫ßu ti√™n
      finalCoverImage = finalImages[0];
    }

    // 5. X√°c ƒë·ªãnh v√† x√≥a c√°c ·∫£nh kh√¥ng c√≤n s·ª≠ d·ª•ng
    const oldImages = phongToUpdate.images;
    const imagesToDelete = oldImages.filter(
      (img) => !existingImages.includes(img)
    );

    imagesToDelete.forEach((imagePath) => {
      const fullPath = path.join(__dirname, "..", imagePath);
      if (fs.existsSync(fullPath)) {
        fs.unlinkSync(fullPath);
      }
    });

    // 6. C·∫≠p nh·∫≠t document trong DB
    const updatedData = {
      ...req.body,
      images: finalImages,
      coverImage: finalCoverImage,
    };

    const updatedPhong = await Phong.findByIdAndUpdate(
      req.params.id,
      updatedData,
      { new: true, runValidators: true }
    );

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", phong: updatedPhong });
  } catch (err) {
    // X√≥a c√°c file m·ªõi upload n·∫øu c√≥ l·ªói x·∫£y ra
    if (req.files) {
      req.files.forEach((file) => fs.unlinkSync(file.path));
    }
    console.error("L·ªói khi c·∫≠p nh·∫≠t ph√≤ng:", err);
    res.status(400).json({ message: err.message });
  }
});

// üóëÔ∏è X√≥a ph√≤ng theo id
router.delete("/:id", async (req, res) => {
  try {
    const deleted = await Phong.findByIdAndDelete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng ƒë·ªÉ x√≥a" });
    }

    // ‚úÖ Gi·∫£m s·ªë ph√≤ng c·ªßa ch·ªß tr·ªç -1
    await User.findByIdAndUpdate(deleted.chuTroId, {
      $inc: { soPhong: -1 },
    });

    return res
      .status(200)
      .json({ message: "X√≥a ph√≤ng th√†nh c√¥ng", id: req.params.id });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a ph√≤ng:", err);
    return res.status(500).json({ message: err.message });
  }
});

// L·∫•y t·∫•t c·∫£ ph√≤ng c·ªßa 1 ch·ªß tr·ªç
router.get("/tro/:chuTroId", async (req, res) => {
  try {
    const { chuTroId } = req.params;
    const chuTro = await User.findById(chuTroId);
    if (!chuTro)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ch·ªß tr·ªç" });

    const phongs = await Phong.find({ chuTroId });
    res.json({ chuTro, phongs });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server" });
  }
});

module.exports = router;
