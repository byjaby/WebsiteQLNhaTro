import React, { useEffect, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Cropper from "react-easy-crop";
import "../Css/Profile.css";
import CloneHeader from "../components/CloneHeader";
import Footer from "../components/Footer";
import defaultAvatar from "../images/default-avatar.png";
import SuaThongTin from "../components/SuaThongTin";
import DoiMatKhau from "../components/DoiMatKhau";

function Profile() {
  const navigate = useNavigate();
  const [selectedImage, setSelectedImage] = useState(null); // file g·ªëc
  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null); // t·ªça ƒë·ªô crop
  const [showCropper, setShowCropper] = useState(false);
  const [user, setUser] = useState(null);
  const [crop, setCrop] = useState({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);

  const [showEdit, setShowEdit] = useState(false);
  const [showChange, setShowChange] = useState(false);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const res = await axios.get("http://localhost:5000/api/auth/me", {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`, // token l∆∞u khi login
          },
        });
        setUser(res.data);
      } catch (err) {
        console.error("L·ªói load user:", err);
        navigate("/dang-nhap"); // token l·ªói => ƒë√° v·ªÅ login
      }
    };

    fetchUser();
  }, [navigate]);

  const onCropComplete = useCallback((_, croppedPixels) => {
    setCroppedAreaPixels(croppedPixels);
  }, []);

  if (!user) {
    return <p>Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng</p>;
  }

  const handleLogout = () => {
    localStorage.clear();
    sessionStorage.clear();
    setUser(null);
    navigate("/dang-nhap");
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
      setSelectedImage(reader.result); // base64 ·∫£nh g·ªëc
      setShowCropper(true);
    };
    reader.readAsDataURL(file);
  };

  const handleCancelCrop = () => {
    setShowCropper(false);
    setSelectedImage(null);
    document.getElementById("avatarInput").value = ""; // reset input file
  };

  // H√†m t·∫°o ·∫£nh ƒë√£ crop t·ª´ canvas
  const getCroppedImg = async (imageSrc, croppedAreaPixels) => {
    const image = new Image();
    image.src = imageSrc;
    await new Promise((resolve) => (image.onload = resolve));

    const canvas = document.createElement("canvas");
    canvas.width = croppedAreaPixels.width;
    canvas.height = croppedAreaPixels.height;
    const ctx = canvas.getContext("2d");

    ctx.drawImage(
      image,
      croppedAreaPixels.x,
      croppedAreaPixels.y,
      croppedAreaPixels.width,
      croppedAreaPixels.height,
      0,
      0,
      croppedAreaPixels.width,
      croppedAreaPixels.height
    );

    return new Promise((resolve) => {
      canvas.toBlob((blob) => {
        resolve(blob);
      }, "image/jpeg");
    });
  };

  const handleSave = async () => {
    if (!selectedImage || !croppedAreaPixels) return;

    const croppedBlob = await getCroppedImg(selectedImage, croppedAreaPixels);

    const formData = new FormData();
    formData.append("avatar", croppedBlob, "avatar.jpg");

    try {
      const res = await axios.post(
        `http://localhost:5000/api/auth/${user._id}/avatar`,
        formData,
        { headers: { "Content-Type": "multipart/form-data" } }
      );

      // c·∫≠p nh·∫≠t user lu√¥n trong state
      setUser(res.data.user);

      setShowCropper(false);
      alert("C·∫≠p nh·∫≠t avatar th√†nh c√¥ng!");

      window.location.reload();
    } catch (err) {
      console.error("Upload th·∫•t b·∫°i:", err);
      alert("C√≥ l·ªói x·∫£y ra khi upload avatar!");
    }
  };

  return (
    <div className="homepage-container">
      {/* Header */}
      <CloneHeader user={user} onLogout={handleLogout} />

      <div className="tenant-dashboard">
        {user.role === "nguoi_thue" ? (
          <main className="tenant-main">
            <div className="room-info-card">
              <div className="profile-grid-2cols">
                {/* C·ªôt tr√°i: avatar + th√¥ng tin c√° nh√¢n */}
                <div className="left-column">
                  <h2>Th√¥ng tin c√° nh√¢n</h2>

                  <div>
                    <div className="avatar-wrapper">
                      <div className="avatar-section">
                        <img
                          src={
                            user?.avatar
                              ? `http://localhost:5000${
                                  user.avatar
                                }?t=${Date.now()}`
                              : defaultAvatar
                          }
                          alt="Avatar"
                          className="avatar-image"
                        />

                        {/* Overlay hi·ªán khi hover */}
                        <div
                          className="avatar-overlay"
                          onClick={() =>
                            document.getElementById("avatarInput").click()
                          }
                        >
                          üì∑
                        </div>

                        {/* Input file ·∫©n */}
                        <input
                          id="avatarInput"
                          type="file"
                          accept="image/*"
                          onChange={handleFileChange}
                          className="avatar-input"
                        />
                      </div>

                      {/* ch·ªØ n·∫±m d∆∞·ªõi avatar */}
                      <p className="avatar-label">H√¨nh ƒë·∫°i di·ªán</p>
                    </div>

                    {showCropper && (
                      <div className="cropper-modal">
                        <div className="cropper-container">
                          <Cropper
                            image={selectedImage}
                            crop={crop}
                            zoom={zoom}
                            aspect={1} // avatar vu√¥ng
                            onCropChange={setCrop}
                            onZoomChange={setZoom}
                            onCropComplete={onCropComplete}
                          />
                        </div>

                        <div className="cropper-actions">
                          <button onClick={handleSave}>‚úÖ L∆∞u ·∫£nh</button>
                          <button onClick={handleCancelCrop}>‚ùå H·ªßy</button>
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="info-section">
                    <p>
                      <strong>H·ªç v√† t√™n:</strong> {user.name}
                    </p>
                    <p>
                      <strong>Ng√†y sinh:</strong>{" "}
                      {user.ngaySinh
                        ? new Date(user.ngaySinh).toLocaleDateString("vi-VN")
                        : "Ch∆∞a c·∫≠p nh·∫≠t"}
                    </p>

                    <p>
                      <strong>Email:</strong> {user.email || "Ch∆∞a c·∫≠p nh·∫≠t"}
                    </p>
                    <p>
                      <strong>S·ªë ƒëi·ªán tho·∫°i:</strong>{" "}
                      {user.soDienThoai || "Ch∆∞a c·∫≠p nh·∫≠t"}
                    </p>
                    <p>
                      <strong>ƒê·ªãa ch·ªâ:</strong> {user.diaChi || "Ch∆∞a c·∫≠p nh·∫≠t"}
                    </p>

                    <div className="profile-actions">
                      <button
                        className="action-button"
                        onClick={() => setShowEdit(true)}
                      >
                        ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin
                      </button>

                      {showEdit && (
                        <SuaThongTin
                          user={user}
                          onClose={() => setShowEdit(false)}
                          onUpdated={(newUser) => setUser(newUser)}
                        />
                      )}

                      {/* ‚úÖ ch·ªâ hi·ªÉn th·ªã n·∫øu user kh√¥ng c√≥ googleId */}
                      {!user.googleId && (
                        <>
                          <button
                            className="action-button"
                            onClick={() => setShowChange(true)}
                          >
                            üîë ƒê·ªïi m·∫≠t kh·∫©u
                          </button>

                          {showChange && (
                            <DoiMatKhau
                              user={user}
                              onClose={() => setShowChange(false)}
                              onUpdated={(newUser) => setUser(newUser)}
                            />
                          )}
                        </>
                      )}
                    </div>
                  </div>
                </div>

                {/* C·ªôt ph·∫£i: th√¥ng tin tr·ªç */}
                <div className="right-column">
                  <h2>Th√¥ng tin tr·ªç</h2>
                  {user.room ? (
                    <>
                      <p>
                        <strong>T√™n tr·ªç:</strong> {user.room.tenTro}
                      </p>
                      <p>
                        <strong>Ch·ªß tr·ªç:</strong> {user.room.chuTro}
                      </p>
                      <p>
                        <strong>S·ªë ph√≤ng ƒëang ·ªü:</strong> {user.room.soPhong}
                      </p>
                      <p>
                        <strong>Gi√° ti·ªÅn:</strong>{" "}
                        {user.room.giaTien.toLocaleString("vi-VN")} ƒë/th√°ng
                      </p>
                      <p>
                        <strong>ƒê·ªãa ch·ªâ tr·ªç:</strong> {user.room.diaChiNhaTro}
                      </p>
                    </>
                  ) : (
                    <p>B·∫°n ch∆∞a ƒëƒÉng k√Ω ·ªü tr·ªç</p>
                  )}
                </div>
              </div>
            </div>

            <div className="quick-actions">
              <h3>Thao t√°c nhanh</h3>
              <div className="actions-grid">
                <button className="action-button">üìÑ Xem h·ª£p ƒë·ªìng</button>
                <button className="action-button">üí¨ G·ª≠i ph·∫£n h·ªìi</button>
                <button className="action-button">
                  üìú Xem l·ªãch s·ª≠ ƒë√≥ng ti·ªÅn
                </button>
              </div>
            </div>
          </main>
        ) : (
          <p>B·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi thu√™</p>
        )}
      </div>

      <Footer />
    </div>
  );
}

export default Profile;
