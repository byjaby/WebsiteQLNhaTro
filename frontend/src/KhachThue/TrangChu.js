import { useEffect, useState } from "react";
import "../KhachThue/Css/TrangChu.css";
import { Link, useNavigate } from "react-router-dom";

function ChuTro() {
  const [user, setUser] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const savedUser =
      localStorage.getItem("user") || sessionStorage.getItem("user");
    const parsedUser = JSON.parse(savedUser);
    if (parsedUser.role === "khach_thue") {
      setUser(parsedUser);
    }
  }, [navigate]);

  const handleLogout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    sessionStorage.removeItem("token");
    sessionStorage.removeItem("user");
    setUser(null);
  };

  const [rooms, setRooms] = useState([
    {
      id: 1,
      name: "Ph√≤ng 101",
      price: 3500000,
      area: 25,
      available: true,
      images: ["room1.jpg"],
      address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
      amenities: ["Wifi", "ƒêi·ªÅu h√≤a", "T·ªß l·∫°nh", "M√°y gi·∫∑t chung"],
      description: "Ph√≤ng s·∫°ch s·∫Ω, tho√°ng m√°t, g·∫ßn tr∆∞·ªùng h·ªçc v√† si√™u th·ªã",
    },
    {
      id: 2,
      name: "Ph√≤ng 102",
      price: 4000000,
      area: 30,
      available: true,
      images: ["room2.jpg"],
      address: "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2, TP.HCM",
      amenities: ["Wifi", "ƒêi·ªÅu h√≤a", "T·ªß l·∫°nh", "B·∫øp ri√™ng"],
      description: "Ph√≤ng c√≥ ban c√¥ng, view ƒë·∫πp, an ninh t·ªët",
    },
    {
      id: 3,
      name: "Ph√≤ng 201",
      price: 4500000,
      area: 35,
      available: true,
      images: ["room3.jpg"],
      address: "789 ƒê∆∞·ªùng DEF, Qu·∫≠n 3, TP.HCM",
      amenities: [
        "Wifi",
        "ƒêi·ªÅu h√≤a",
        "T·ªß l·∫°nh",
        "Ph√≤ng t·∫Øm ri√™ng",
        "B·∫øp ri√™ng",
      ],
      description: "Ph√≤ng cao c·∫•p, ƒë·∫ßy ƒë·ªß ti·ªán nghi, g·∫ßn khu c√¥ng nghi·ªáp",
    },
    {
      id: 4,
      name: "Ph√≤ng 103",
      price: 3200000,
      area: 20,
      available: true,
      images: ["room4.jpg"],
      address: "321 ƒê∆∞·ªùng GHI, Qu·∫≠n 4, TP.HCM",
      amenities: ["Wifi", "Qu·∫°t tr·∫ßn", "T·ªß l·∫°nh chung"],
      description: "Ph√≤ng gi√° r·∫ª, ph√π h·ª£p sinh vi√™n, g·∫ßn tr∆∞·ªùng ƒë·∫°i h·ªçc",
    },
    {
      id: 5,
      name: "Ph√≤ng 202",
      price: 5000000,
      area: 40,
      available: false,
      images: ["room5.jpg"],
      address: "654 ƒê∆∞·ªùng JKL, Qu·∫≠n 5, TP.HCM",
      amenities: [
        "Wifi",
        "ƒêi·ªÅu h√≤a",
        "T·ªß l·∫°nh",
        "Ph√≤ng t·∫Øm ri√™ng",
        "B·∫øp ri√™ng",
        "Ban c√¥ng",
      ],
      description: "Ph√≤ng VIP, view th√†nh ph·ªë, ƒë·∫ßy ƒë·ªß n·ªôi th·∫•t cao c·∫•p",
    },
    {
      id: 6,
      name: "Ph√≤ng 301",
      price: 3800000,
      area: 28,
      available: true,
      images: ["room6.jpg"],
      address: "987 ƒê∆∞·ªùng MNO, Qu·∫≠n 6, TP.HCM",
      amenities: ["Wifi", "ƒêi·ªÅu h√≤a", "T·ªß l·∫°nh", "M√°y gi·∫∑t chung"],
      description: "Ph√≤ng tho√°ng m√°t, g·∫ßn ch·ª£ v√† b·ªánh vi·ªán",
    },
  ]);

  const [searchTerm, setSearchTerm] = useState("");
  const [priceRange, setPriceRange] = useState("all");
  const [sortBy, setSortBy] = useState("price-asc");
  const [showAvailableOnly, setShowAvailableOnly] = useState(true);

  const filteredRooms = rooms.filter((room) => {
    const matchesSearch =
      room.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      room.address.toLowerCase().includes(searchTerm.toLowerCase());

    const matchesPrice =
      priceRange === "all" ||
      (priceRange === "under3" && room.price < 3000000) ||
      (priceRange === "3to4" &&
        room.price >= 3000000 &&
        room.price < 4000000) ||
      (priceRange === "4to5" &&
        room.price >= 4000000 &&
        room.price < 5000000) ||
      (priceRange === "over5" && room.price >= 5000000);

    const matchesAvailability = !showAvailableOnly || room.available;

    return matchesSearch && matchesPrice && matchesAvailability;
  });

  const sortedRooms = [...filteredRooms].sort((a, b) => {
    switch (sortBy) {
      case "price-asc":
        return a.price - b.price;
      case "price-desc":
        return b.price - a.price;
      case "area-asc":
        return a.area - b.area;
      case "area-desc":
        return b.area - a.area;
      default:
        return 0;
    }
  });

  const availableRooms = rooms.filter((room) => room.available).length;
  const averagePrice =
    rooms.reduce((sum, room) => sum + room.price, 0) / rooms.length;

  return (
    <div className="homepage-container">
      {/* Header */}
      <header className="header">
        <div className="header-content">
          <div className="logo-section">
            <div className="building-icon">üè†</div>
            <h1 className="title">Nh√† Tr·ªç Online</h1>
          </div>

          <nav className="nav-menu">
            <Link to="/" className="nav-link active">
              Trang ch·ªß
            </Link>
            <a href="#about" className="nav-link">
              Gi·ªõi thi·ªáu
            </a>
            <a href="#contact" className="nav-link">
              Li√™n h·ªá
            </a>
          </nav>

          <div className="header-actions">
            {user ? (
              // ‚úÖ N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
              <div className="user-info">
                <span className="user-name">üë§ {user.name}</span>
                <button className="logout-btn" onClick={handleLogout}>
                  üö™ ƒêƒÉng xu·∫•t
                </button>
              </div>
            ) : (
              // ‚úÖ N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
              <>
                <Link to="/dang-nhap">
                  <button className="login-btn">ƒêƒÉng nh·∫≠p</button>
                </Link>
                <Link to="/dang-nhap" state={{ isLogin: false }}>
                  <button className="register-btn">ƒêƒÉng k√Ω</button>
                </Link>
              </>
            )}
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="hero-section">
        <div className="hero-content">
          <h2 className="hero-title">T√¨m ph√≤ng tr·ªç l√Ω t∆∞·ªüng c·ªßa b·∫°n</h2>
          <p className="hero-subtitle">
            H√†ng trƒÉm ph√≤ng tr·ªç ch·∫•t l∆∞·ª£ng, gi√° c·∫£ h·ª£p l√Ω, ƒë·∫ßy ƒë·ªß ti·ªán nghi
          </p>

          {/* Quick Search */}
          <div className="quick-search">
            <div className="search-input-container">
              <span className="search-icon">üîç</span>
              <input
                type="text"
                placeholder="T√¨m ki·∫øm theo t√™n ph√≤ng ho·∫∑c ƒë·ªãa ch·ªâ..."
                className="hero-search-input"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <button className="search-btn">T√¨m ki·∫øm</button>
          </div>

          {/* Quick Stats */}
          <div className="quick-stats">
            <div className="stat-item">
              <span className="stat-number">{rooms.length}</span>
              <span className="stat-label">Ph√≤ng c√≥ s·∫µn</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">{availableRooms}</span>
              <span className="stat-label">Ph√≤ng tr·ªëng</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">
                {Math.round(averagePrice / 1000000)} Tri·ªáu ƒë·ªìng
              </span>
              <span className="stat-label">Gi√° trung b√¨nh</span>
            </div>
          </div>
        </div>
      </section>

      {/* Filters */}
      <section className="filters-section">
        <div className="filters-container">
          <div className="filter-group">
            <label className="filter-label">Kho·∫£ng gi√°:</label>
            <select
              className="filter-select"
              value={priceRange}
              onChange={(e) => setPriceRange(e.target.value)}
            >
              <option value="all">T·∫•t c·∫£</option>
              <option value="under3">D∆∞·ªõi 3 tri·ªáu</option>
              <option value="3to4">3 - 4 tri·ªáu</option>
              <option value="4to5">4 - 5 tri·ªáu</option>
              <option value="over5">Tr√™n 5 tri·ªáu</option>
            </select>
          </div>

          <div className="filter-group">
            <label className="filter-label">S·∫Øp x·∫øp:</label>
            <select
              className="filter-select"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
            >
              <option value="price-asc">Gi√° th·∫•p ƒë·∫øn cao</option>
              <option value="price-desc">Gi√° cao ƒë·∫øn th·∫•p</option>
              <option value="area-asc">Di·ªán t√≠ch nh·ªè ƒë·∫øn l·ªõn</option>
              <option value="area-desc">Di·ªán t√≠ch l·ªõn ƒë·∫øn nh·ªè</option>
            </select>
          </div>

          <div className="filter-group">
            <label className="checkbox-container">
              <input
                type="checkbox"
                checked={showAvailableOnly}
                onChange={(e) => setShowAvailableOnly(e.target.checked)}
              />
              <span className="checkmark"></span>
              Ch·ªâ hi·ªÉn th·ªã ph√≤ng c√≤n tr·ªëng
            </label>
          </div>
        </div>
      </section>

      {/* Rooms Grid */}
      <section className="rooms-section">
        <div className="section-header">
          <h3 className="section-title">Danh s√°ch ph√≤ng tr·ªç</h3>
          <p className="section-subtitle">
            T√¨m th·∫•y {sortedRooms.length} ph√≤ng ph√π h·ª£p
          </p>
        </div>

        <div className="rooms-grid">
          {sortedRooms.map((room) => (
            <div
              key={room.id}
              className={`room-card ${!room.available ? "unavailable" : ""}`}
            >
              <div className="room-image">
                <div className="image-placeholder">
                  <span className="camera-icon">üì∑</span>
                </div>
                <div className="room-status">
                  <span
                    className={`status-badge ${
                      room.available ? "available" : "unavailable"
                    }`}
                  >
                    {room.available ? "C√≤n tr·ªëng" : "ƒê√£ thu√™"}
                  </span>
                </div>
              </div>

              <div className="room-content">
                <h4 className="room-name">{room.name}</h4>
                <p className="room-address">üìç {room.address}</p>

                <div className="room-details">
                  <div className="detail-row">
                    <span className="detail-label">üí∞ Gi√°:</span>
                    <span className="room-price">
                      {room.price.toLocaleString("vi-VN")}ƒë/th√°ng
                    </span>
                  </div>
                  <div className="detail-row">
                    <span className="detail-label">üìè Di·ªán t√≠ch:</span>
                    <span className="room-area">{room.area}m¬≤</span>
                  </div>
                </div>

                <div className="amenities">
                  <span className="amenities-label">Ti·ªán nghi:</span>
                  <div className="amenities-list">
                    {room.amenities.slice(0, 3).map((amenity, index) => (
                      <span key={index} className="amenity-tag">
                        {amenity}
                      </span>
                    ))}
                    {room.amenities.length > 3 && (
                      <span className="amenity-tag">
                        +{room.amenities.length - 3}
                      </span>
                    )}
                  </div>
                </div>

                <p className="room-description">{room.description}</p>

                <div className="room-actions">
                  <button className="action-btn view-btn">
                    <span className="btn-icon">üëÅÔ∏è</span>
                    Xem chi ti·∫øt
                  </button>
                  <button
                    className="action-btn contact-btn"
                    disabled={!room.available}
                  >
                    <span className="btn-icon">üìû</span>
                    Li√™n h·ªá
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </section>

      {/* Footer */}
      <footer className="footer">
        <div className="footer-content">
          <div className="footer-section">
            <h4 className="footer-title">Nh√† Tr·ªç Online</h4>
            <p className="footer-description">
              N·ªÅn t·∫£ng t√¨m ki·∫øm ph√≤ng tr·ªç h√†ng ƒë·∫ßu, k·∫øt n·ªëi ch·ªß nh√† v√† ng∆∞·ªùi
              thu√™ m·ªôt c√°ch nhanh ch√≥ng v√† ti·ªán l·ª£i.
            </p>
          </div>

          <div className="footer-section">
            <h4 className="footer-title">Li√™n h·ªá</h4>
            <div className="contact-info">
              <p>üìû Hotline: 1900 1234</p>
              <p>üìß Email: info@nhatroonline.com</p>
              <p>üìç ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, TP.HCM</p>
            </div>
          </div>

          <div className="footer-section">
            <h4 className="footer-title">H·ªó tr·ª£</h4>
            <ul className="footer-links">
              <li>
                <a href="#faq">C√¢u h·ªèi th∆∞·ªùng g·∫∑p</a>
              </li>
              <li>
                <a href="#guide">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</a>
              </li>
              <li>
                <a href="#policy">Ch√≠nh s√°ch b·∫£o m·∫≠t</a>
              </li>
              <li>
                <a href="#terms">ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a>
              </li>
            </ul>
          </div>
        </div>

        <div className="footer-bottom">
          <p>&copy; 2024 Nh√† Tr·ªç Online. All rights reserved.</p>
        </div>
      </footer>
    </div>
  );
}

export default ChuTro;
