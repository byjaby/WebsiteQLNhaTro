import { useNavigate } from "react-router-dom";
import "../Css/RoomsGrid.css";
import axios from "axios";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useState } from "react";

function RoomsGrid({ rooms, fetchRooms }) {
  const navigate = useNavigate();
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [selectedRoom, setSelectedRoom] = useState(null);
  const [loading, setLoading] = useState(false);

  const getStatusClass = (status) => {
    switch (status) {
      case "ƒê√£ thu√™":
        return "status rented";
      case "Tr·ªëng":
        return "status vacant";
      case "B·∫£o tr√¨":
        return "status maintenance";
      default:
        return "status unknown";
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case "ƒê√£ thu√™":
        return "ƒê√£ thu√™";
      case "Tr·ªëng":
        return "Tr·ªëng";
      case "B·∫£o tr√¨":
        return "B·∫£o tr√¨";
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  // ‚úÖ M·ªü modal x√°c nh·∫≠n x√≥a
  const openDeleteModal = (room) => {
    setSelectedRoom(room);
    setShowDeleteModal(true);
  };

  // ‚úÖ H√†m x√≥a
  const handleDelete = async () => {
    try {
      setLoading(true);
      await axios.delete(`http://localhost:5000/api/phong/${selectedRoom._id}`);
      toast.success("üóëÔ∏è X√≥a ph√≤ng th√†nh c√¥ng!", { autoClose: 2000 });
      setShowDeleteModal(false);
      setSelectedRoom(null);
      if (fetchRooms) fetchRooms(); // reload danh s√°ch
    } catch (err) {
      toast.error("‚ùå L·ªói khi x√≥a ph√≤ng!");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <div className="rooms-grid">
        {rooms.map((room) => (
          <div key={room._id} className="room-card">
            {/* ‚úÖ ·∫¢nh b√¨a */}
            <div className="room-header">
              <div className="room-gradient">
                {room.coverImage ? (
                  <img
                    src={`http://localhost:5000${room.coverImage}`}
                    alt={room.tenPhong}
                    className="room-cover-image"
                  />
                ) : (
                  <div className="no-image">Kh√¥ng c√≥ ·∫£nh</div>
                )}
                <div className="overlay"></div>
                <span className={getStatusClass(room.trangThai)}>
                  {getStatusText(room.trangThai)}
                </span>
              </div>
            </div>

            <div className="room-body">
              <h3>T√™n ph√≤ng: {room.tenPhong}</h3>
              <div className="room-info">
                <div>
                  üí∞ Gi√°: {room.tienPhong.toLocaleString("vi-VN")}ƒë/th√°ng
                </div>
                {room.tenant && <div>üë§ {room.tenant}</div>}
                {room.dueDate && <div>üïí {room.dueDate}</div>}
              </div>
              <div className="room-actions">
                <button
                  className="add"
                  onClick={() => navigate(`/phong/${room._id}`)}
                >
                  Xem
                </button>
                <button
                  className="update"
                  onClick={() =>
                    navigate(`/phong/${room._id}`, { state: { edit: true } })
                  }
                >
                  S·ª≠a
                </button>
                <button
                  className="delete"
                  onClick={() => openDeleteModal(room)}
                >
                  X√≥a
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* ‚úÖ Modal x√°c nh·∫≠n x√≥a */}
      {showDeleteModal && selectedRoom && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>‚ö†Ô∏è X√°c nh·∫≠n x√≥a</h3>
            <p>
              H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph√≤ng{" "}
              <b>{selectedRoom.tenPhong}</b> kh√¥ng?
            </p>
            <div className="modal-actions">
              <button
                className="action-btn delete"
                onClick={handleDelete}
                disabled={loading}
              >
                {loading ? "‚è≥ ƒêang x√≥a..." : "üóëÔ∏è X√≥a"}
              </button>
              <button
                className="action-btn cancel"
                onClick={() => setShowDeleteModal(false)}
                disabled={loading}
              >
                ‚ùå H·ªßy
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ‚úÖ ToastContainer */}
      <ToastContainer
        position="top-right"
        autoClose={2000}
        hideProgressBar={false}
      />
    </>
  );
}

export default RoomsGrid;
