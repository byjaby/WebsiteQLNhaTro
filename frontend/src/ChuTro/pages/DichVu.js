import { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import "../Css/DichVu.css";

function DichVu() {
  const [dichVuList, setDichVuList] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [newService, setNewService] = useState({
    tenDichVu: "",
    donVi: "",
    donGia: "",
    moTa: "",
  });

  const navigate = useNavigate();
  const location = useLocation();
  const chuTroId = location.state?.chuTroId;

  useEffect(() => {
    if (!chuTroId) {
      navigate("/"); // n·∫øu kh√¥ng c√≥ id th√¨ quay v·ªÅ trang ch·ªß
      return;
    }

    fetch(`http://localhost:5000/api/dichvu/${chuTroId}`)
      .then((res) => res.json())
      .then((data) => {
        console.log("üìå Data d·ªãch v·ª• t·ª´ API:", data);
        setDichVuList(data);
      })
      .catch((err) => console.error("L·ªói khi load d·ªãch v·ª•:", err));
  }, [chuTroId, navigate]);

  // X·ª≠ l√Ω th√™m d·ªãch v·ª•
  const handleAddService = async () => {
    const savedUser =
      localStorage.getItem("user") || sessionStorage.getItem("user");
    const parsedUser = JSON.parse(savedUser);

    if (
      !newService.tenDichVu ||
      !newService.donVi ||
      newService.donGia == null ||
      newService.donGia === ""
    ) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    try {
      const res = await fetch("http://localhost:5000/api/dichvu", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          ...newService,
          chuTroId: parsedUser.id,
        }),
      });

      if (res.ok) {
        const added = await res.json();
        setDichVuList([...dichVuList, added]);
        setNewService({ tenDichVu: "", donVi: "", donGia: "", moTa: "" });

        // ‚úÖ Th√¥ng b√°o th√†nh c√¥ng
        alert("Th√™m d·ªãch v·ª• th√†nh c√¥ng!");
      } else {
        const errData = await res.json();
        alert("L·ªói: " + (errData.error || "Kh√¥ng th·ªÉ th√™m d·ªãch v·ª•"));
      }
    } catch (err) {
      console.error("L·ªói th√™m d·ªãch v·ª•:", err);
      alert("ƒê√£ x·∫£y ra l·ªói khi th√™m d·ªãch v·ª•!");
    }
  };

  // X·ª≠ l√Ω x√≥a
  const handleDelete = async (id, tenDichVu) => {
    if (tenDichVu === "ƒêi·ªán" || tenDichVu === "N∆∞·ªõc") {
      alert("Kh√¥ng th·ªÉ x√≥a d·ªãch v·ª• m·∫∑c ƒë·ªãnh: " + tenDichVu);
      return;
    }

    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a d·ªãch v·ª• n√†y?")) return;

    try {
      const res = await fetch(`http://localhost:5000/api/dichvu/${id}`, {
        method: "DELETE",
      });

      if (res.ok) {
        setDichVuList(dichVuList.filter((dv) => dv._id !== id));
        alert(`ƒê√£ x√≥a d·ªãch v·ª•`);
      } else {
        alert("X√≥a d·ªãch v·ª• th·∫•t b·∫°i!");
      }
    } catch (err) {
      console.error("L·ªói x√≥a d·ªãch v·ª•:", err);
      alert("C√≥ l·ªói x·∫£y ra khi x√≥a d·ªãch v·ª•!");
    }
  };

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t
  const handleSaveEdit = async (id, updatedService) => {
    try {
      const res = await fetch(`http://localhost:5000/api/dichvu/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedService),
      });

      if (res.ok) {
        const data = await res.json(); // l·∫•y d·ªØ li·ªáu update t·ª´ server

        setDichVuList(dichVuList.map((dv) => (dv._id === id ? data : dv)));
        setEditingId(null);

        alert("C·∫≠p nh·∫≠t d·ªãch v·ª• th√†nh c√¥ng ‚úÖ"); // üîî th√¥ng b√°o
      } else {
        const errData = await res.json();
        alert("C·∫≠p nh·∫≠t th·∫•t b·∫°i: " + errData.error);
      }
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t d·ªãch v·ª•:", err);
      alert("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t!");
    }
  };

  return (
    <div className="dichvu-container">
      <h2>Danh s√°ch d·ªãch v·ª•</h2>

      {/* Form th√™m d·ªãch v·ª• */}
      <div className="add-service-form">
        <input
          type="text"
          placeholder="T√™n d·ªãch v·ª•"
          value={newService.tenDichVu}
          onChange={(e) =>
            setNewService({ ...newService, tenDichVu: e.target.value })
          }
        />
        <input
          type="text"
          placeholder="ƒê∆°n v·ªã"
          value={newService.donVi}
          onChange={(e) =>
            setNewService({ ...newService, donVi: e.target.value })
          }
        />

        <input
          type="text"
          placeholder="ƒê∆°n gi√°"
          value={newService.donGia ?? ""}
          onChange={(e) => {
            let value = e.target.value;

            // B·ªè d·∫•u ch·∫•m v√† d·∫•u ph·∫©y ngƒÉn c√°ch h√†ng ng√†n
            value = value.replace(/[.,\s]/g, "");

            setNewService({
              ...newService,
              donGia: value ? Number(value) : null,
            });
          }}
        />

        <input
          type="text"
          placeholder="M√¥ t·∫£"
          value={newService.moTa}
          onChange={(e) =>
            setNewService({ ...newService, moTa: e.target.value })
          }
        />
        <button onClick={handleAddService}>‚ûï Th√™m</button>
      </div>

      {/* B·∫£ng d·ªãch v·ª• */}
      <table className="dichvu-table">
        <thead>
          <tr>
            <th>T√™n d·ªãch v·ª•</th>
            <th>ƒê∆°n v·ªã</th>
            <th>ƒê∆°n gi√° (VNƒê)</th>
            <th>M√¥ t·∫£</th>

            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {dichVuList.length > 0 ? (
            dichVuList.map((dv) => (
              <tr key={dv._id}>
                <td>
                  {editingId === dv._id ? (
                    <input
                      value={dv.tenDichVu}
                      disabled={
                        dv.tenDichVu === "ƒêi·ªán" || dv.tenDichVu === "N∆∞·ªõc"
                      }
                      onChange={(e) =>
                        setDichVuList(
                          dichVuList.map((item) =>
                            item._id === dv._id
                              ? { ...item, tenDichVu: e.target.value }
                              : item
                          )
                        )
                      }
                    />
                  ) : (
                    dv.tenDichVu
                  )}
                </td>
                <td>
                  {editingId === dv._id ? (
                    <input
                      value={dv.donVi}
                      onChange={(e) =>
                        setDichVuList(
                          dichVuList.map((item) =>
                            item._id === dv._id
                              ? { ...item, donVi: e.target.value }
                              : item
                          )
                        )
                      }
                    />
                  ) : (
                    dv.donVi
                  )}
                </td>

                <td>
                  {editingId === dv._id ? (
                    <input
                      type="text"
                      value={dv.donGia ?? ""}
                      onChange={(e) => {
                        let value = e.target.value;

                        // b·ªè h·∫øt d·∫•u ch·∫•m ho·∫∑c d·∫•u ph·∫©y ph√¢n t√°ch ng√†n
                        value = value.replace(/[.,]/g, "");

                        setDichVuList(
                          dichVuList.map((item) =>
                            item._id === dv._id
                              ? {
                                  ...item,
                                  donGia: value ? Number(value) : null,
                                }
                              : item
                          )
                        );
                      }}
                    />
                  ) : dv.donGia != null ? (
                    `${dv.donGia.toLocaleString()} VND`
                  ) : (
                    "‚Äî"
                  )}
                </td>
                <td>
                  {editingId === dv._id ? (
                    <input
                      value={dv.moTa}
                      onChange={(e) =>
                        setDichVuList(
                          dichVuList.map((item) =>
                            item._id === dv._id
                              ? { ...item, moTa: e.target.value }
                              : item
                          )
                        )
                      }
                    />
                  ) : (
                    dv.moTa
                  )}
                </td>
                <td>
                  {editingId === dv._id ? (
                    <>
                      <button
                        className="save-btn"
                        onClick={() => handleSaveEdit(dv._id, dv)}
                      >
                        üíæ L∆∞u
                      </button>
                      <button
                        className="cancel-btn"
                        onClick={() => setEditingId(null)}
                      >
                        ‚ùå H·ªßy
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="edit-btn"
                        onClick={() => setEditingId(dv._id)}
                      >
                        ‚úèÔ∏è S·ª≠a
                      </button>
                      <button
                        className="delete-btn"
                        onClick={() => handleDelete(dv._id)}
                      >
                        üóëÔ∏è X√≥a
                      </button>
                    </>
                  )}
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="5" style={{ textAlign: "center" }}>
                Ch∆∞a c√≥ d·ªãch v·ª• n√†o
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}

export default DichVu;
